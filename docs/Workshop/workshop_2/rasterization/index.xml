<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/colorShading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/colorShading/</guid><description>Color shading # Code # Color shading Code const ROWS = 20; const COLS = 20; const LEN = 20; let quadrille; let v0y, v0x, v1y, v1x, v2y, v2x; let cp0, cp1, cp2; let p0 = [255, 0, 0, 7, 4], p1 = [0, 255, 0, -1, -10], p2 = [0, 0, 255, 5, 8]; function setup() { createCanvas(400, 440); quadrille = createQuadrille(20, 20); quadrille.colorize(&amp;#34;black&amp;#34;); keyPressed(); cp0 = createColorPicker(&amp;#34;red&amp;#34;); cp0.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/textureMapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/textureMapping/</guid><description>Texture mapping # Code # Texture mapping Code &amp;#34;use strict&amp;#34;; const ROWS = 20; const COLS = 20; let LEN; let quadrille; let row0, col0, row1, col1, row2, col2; let pg2, pg1; let img; let u0, v0, u1, v1, u2, v2, u3, v3; let button1, button2; function preload() { img = loadImage(&amp;#34;/Talleres/sketches/taller2/graphics.jpg&amp;#34;); } function setup() { createCanvas(700, 350); pg1 = createGraphics(width / 2, height); pg2 = createGraphics(width / 2, height); LEN = width / (COLS * 2); quadrille = createQuadrille(20, 20); pg2.</description></item></channel></rss>