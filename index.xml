<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing</title><link>https://visual-computing-2022-2.github.io/Talleres/</link><description>Recent content in Introduction on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visual-computing-2022-2.github.io/Talleres/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://visual-computing-2022-2.github.io/Talleres/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visual-computing-2022-2.github.io/Talleres/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visual-computing-2022-2.github.io/Talleres/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visual-computing-2022-2.github.io/Talleres/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/masking/</guid><description>Masking # Image processing # Shortcuts # Key Action t toggle kernel s Lightness visualization (change mode) Code # Image processing app&amp;rsquo;s code var stateR; var stateG; var stateB; var red_arr = new Array(256); var green_arr = new Array(256); var blue_arr = new Array(256); var showFilter = false; const filter = [ [-2, -1, 0], [-1, 1, 1], [0, 1, 2], ]; const filter2 = [ [-1, 0, 1], [-1, 0, 1], [-1, 0, 1], ]; var colors = new Array(3); var leftM = 30; var upM = 15; function preload() { img = loadImage(&amp;#34;/Talleres/sketches/taller1/assets/turquia.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/frisensLazyShadow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/frisensLazyShadow/</guid><description>Frisén’s Lazy Shadow # Code # Frisén’s Lazy Shadow Code let angulo; let speed; let rot; let stopButton; let startButton; let speedSlider; let rotSlider; let lightBackground; function stop() { speedSlider.value(0); } function start() { speedSlider.value(0.05); } function preload() { img = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/plus.png&amp;#39;); } function setup() { createCanvas(500, 500); noStroke(); startButton = createButton(&amp;#39;Start&amp;#39;); startButton.position(0, 0); startButton.size(100, 30); startButton.mousePressed(start); stopButton = createButton(&amp;#39;Stop&amp;#39;); stopButton.position(0, 35); stopButton.size(100, 30); stopButton.mousePressed(stop); speedSlider = createSlider(0, 0.5, 0.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/jastrowIllusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/jastrowIllusion/</guid><description>Jastrow Illusion # Code # Jastrow Illusion Code let img; let xcord; let ycord; function preload() { img = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/track1.png&amp;#39;); } function setup() { createCanvas(500, 500); noStroke(); xcord = 0; ycord = 0; } function draw() { background(150); image(img, 50+xcord, 50+ycord, 300, 100); image(img, 90-xcord, 150-ycord, 300, 100); if (xcord &amp;gt;= 40) { sleep(2000).then( () =&amp;gt; { xcord = 0; ycord = 0; } ) }else{ xcord = xcord + 1/5; ycord = ycord + (100/40)/5; } } function sleep(millisecondsDuration){ return new Promise((resolve) =&amp;gt; { setTimeout(resolve, millisecondsDuration); }) } Visualization # Background # Jastrow&amp;rsquo;s optical illusion was discovered in 1889 by the American psychologist Joseph Jastrow.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/kinegramScanimation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/kinegramScanimation/</guid><description> Kinegram (“Scanimation”) #</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/steppingFeetMotionIllusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/steppingFeetMotionIllusion/</guid><description>“Stepping feet” Motion Illusion # Code # Frisén’s Lazy Shadow Code let xPosition = 0 ; let blue_rect; let yellow_rect; let sum = 1 function setup() { createCanvas(600, 400); } function draw() { background(230); if (keyIsPressed === false) { for (let i = 0; i &amp;lt; width ; i+=20) { let c = color(0, 0, 0); fill(c); noStroke(); rect(i, 0, 10, 720); } } xPosition = xPosition+ sum if ( xPosition + 40 &amp;gt; 600 ){ sum = -1 } if ( xPosition &amp;lt; 0 ){ sum = 1 } c = color(0, 0, 190); fill(c); noStroke(); blue_rect=rect(xPosition, 170, 40, 30); c = color(255, 255, 0); fill(c); noStroke(); yellow_rect=rect(xPosition, 230, 40, 30); let ms = millis() + 50 while ( millis ( ) &amp;lt; ms ){ } } Visualization # Background # The Stepping feet” Motion Illusion is a visual illusion.</description></item></channel></rss>