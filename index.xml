<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing</title><link>https://visual-computing-2022-2.github.io/Talleres/</link><description>Recent content in Introduction on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visual-computing-2022-2.github.io/Talleres/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/masking/</guid><description>Masking # Image processing # Shortcuts # Key Action t toggle kernel Code # Image processing app&amp;rsquo;s code var stateR; var stateG; var stateB; var red_arr = new Array(256); var green_arr = new Array(256); var blue_arr = new Array(256); var showFilter = false; const filter = \[ [-2, -1, 0], [-1, 1, 1], [0, 1, 2], ]; const filter2 = \[ [-1, 0, 1], [-1, 0, 1], [-1, 0, 1], ]; var colors = new Array(3); var leftM = 30; var upM = 15; function preload() { img = loadImage(&amp;#34;/Talleres/sketches/taller1/assets/turquia.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/frisensLazyShadow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/frisensLazyShadow/</guid><description>Frisén’s Lazy Shadow # Code # Frisén’s Lazy Shadow Code let angulo; let speed; let rot; let stopButton; let startButton; let speedSlider; let rotSlider; let lightBackground; function stop() { speedSlider.value(0); } function start() { speedSlider.value(0.05); } function preload() { img = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/plus.png&amp;#39;); } function setup() { createCanvas(500, 500); noStroke(); startButton = createButton(&amp;#39;Start&amp;#39;); startButton.position(0, 0); startButton.size(100, 30); startButton.mousePressed(start); stopButton = createButton(&amp;#39;Stop&amp;#39;); stopButton.position(0, 35); stopButton.size(100, 30); stopButton.mousePressed(stop); speedSlider = createSlider(0, 0.5, 0.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/jastrowIllusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/jastrowIllusion/</guid><description>Jastrow Illusion # Code # Jastrow Illusion Code let img; let xcord; let ycord; function preload() { img = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/track1.png&amp;#39;); } function setup() { createCanvas(500, 500); noStroke(); xcord = 0; ycord = 0; } function draw() { background(150); image(img, 50+xcord, 50+ycord, 300, 100); image(img, 90-xcord, 150-ycord, 300, 100); if (xcord &amp;gt;= 40) { sleep(2000).then( () =&amp;gt; { xcord = 0; ycord = 0; } ) }else{ xcord = xcord + 1/5; ycord = ycord + (100/40)/5; } } function sleep(millisecondsDuration){ return new Promise((resolve) =&amp;gt; { setTimeout(resolve, millisecondsDuration); }) } Visualization # Background # Jastrow&amp;rsquo;s optical illusion was discovered in 1889 by the American psychologist Joseph Jastrow.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/kinegramScanimation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/kinegramScanimation/</guid><description>Kinegram (“Scanimation”) # Code # Kinegram (Scanimation) Pacman Code let xPosition = 900 ; let blue_rect; let yellow_rect; let sum = -1 function setup() { createCanvas(900, 300); bg = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/pacman.png&amp;#39;); } function draw() { image(bg, 0, 0); if ( xPosition &amp;gt; width ){ sum = -1 let ms = millis() + 5000 while ( millis ( ) &amp;lt; ms ){ } } if ( xPosition &amp;lt; 0 ){ let ms = millis() + 5000 while ( millis ( ) &amp;lt; ms ){ } sum = 1 } xPosition = xPosition+ sum for (let i = xPosition; i &amp;lt; width ; i+=17) { let c = color(0, 0, 0); fill(c); noStroke(); rect(i, 0, 15, 247); } let ms = millis() + 40 while ( millis ( ) &amp;lt; ms ){ } } Kinegram (Scanimation) Circle Code let img; let w, h; let sum = -1 let xPosition; function preload() { img = loadImage(&amp;#39;/Talleres/sketches/taller1/assets/circle.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/steppingFeetMotionIllusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_1/visual_ilussion/steppingFeetMotionIllusion/</guid><description>“Stepping feet” Motion Illusion # Code # Stepping feet Motion Illusion Code let xPosition = 0 ; let blue_rect; let yellow_rect; let sum = 1 function setup() { createCanvas(600, 400); } function draw() { background(230); if (keyIsPressed === false) { for (let i = 0; i &amp;lt; width ; i+=20) { let c = color(0, 0, 0); fill(c); noStroke(); rect(i, 0, 10, 720); } } xPosition = xPosition+ sum if ( xPosition + 40 &amp;gt; 600 ){ sum = -1 } if ( xPosition &amp;lt; 0 ){ sum = 1 } c = color(0, 0, 190); fill(c); noStroke(); blue_rect=rect(xPosition, 170, 40, 30); c = color(255, 255, 0); fill(c); noStroke(); yellow_rect=rect(xPosition, 230, 40, 30); let ms = millis() + 50 while ( millis ( ) &amp;lt; ms ){ } } Visualization # Background # The &amp;ldquo;Stepping feet” Motion Illusion is a visual illusion.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/colorShading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/colorShading/</guid><description>Color shading # Code # Color shading Code const ROWS = 20; const COLS = 20; const LEN = 20; let quadrille; let v0y, v0x, v1y, v1x, v2y, v2x; let cp0, cp1, cp2; let p0 = [255, 0, 0, 7, 4], p1 = [0, 255, 0, -1, -10], p2 = [0, 0, 255, 5, 8]; function setup() { createCanvas(400, 440); quadrille = createQuadrille(20, 20); quadrille.colorize(&amp;#34;black&amp;#34;); keyPressed(); cp0 = createColorPicker(&amp;#34;red&amp;#34;); cp0.</description></item><item><title/><link>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/textureMapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visual-computing-2022-2.github.io/Talleres/docs/Workshop/workshop_2/rasterization/textureMapping/</guid><description>Texture mapping # Code # Texture mapping Code &amp;#34;use strict&amp;#34;; const ROWS = 20; const COLS = 20; let LEN; let quadrille; let row0, col0, row1, col1, row2, col2; let pg2, pg1; let img; let u0, v0, u1, v1, u2, v2, u3, v3; let button1, button2; function preload() { img = loadImage(&amp;#34;/Talleres/sketches/taller2/graphics.jpg&amp;#34;); } function setup() { createCanvas(700, 350); pg1 = createGraphics(width / 2, height); pg2 = createGraphics(width / 2, height); LEN = width / (COLS * 2); quadrille = createQuadrille(20, 20); pg2.</description></item></channel></rss>